---
layout: post
title:  "2019年09月29日"
description: "C语言函数指针"
categories: code
author: 王武
---

### C 指针

> 每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&）
>
> 运算访问的地址，它表示了在内存中的一个地址。

```c
#include <stdio.h>

int main ()
{
    int var1;	// 声明变量 var1
    char var2[10];	//声明变量 var2
    
    printf("var1 变量的地址：%p\n", &var1);
    printf("var2 变量的地址：%p\n", &var2);
    
    return 0;
}
```

> var1 变量的地址：0x7ffee77c49b4
>
> var2 变量的地址：0x7ffee77c49be

### 什么是指针

> 指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。

```c
// 指针声明
int		*ip;	/* 一个整型的指针 */
double	*dp		/* 一个 double 型的指针 */
float	*fp		/* 一个浮点型的指针 */
char 	*ch		/* 一个字符型的指针 */
```

### 函数指针

- 函数指针是指向函数的指针变量。
- 通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。
- 函数指针可以像一般函数一样，用于调用函数、参数传递。

```c
#include <stdio.h>
 
int max(int x, int y)
{
    return x > y ? x : y;
}
 
int main(void)
{
    /* p 是函数指针 */
    int (* p)(int, int) = & max; // &可以省略
    int a, b, c, d;
 
    printf("请输入三个数字:");
    scanf("%d %d %d", & a, & b, & c);
 
    /* 与直接调用函数等价，d = max(max(a, b), c) */
    d = p(p(a, b), c); 
 
    printf("最大的数字是: %d\n", d);
 
    return 0;
}
```

> 请输入三个数字：12 56 3
>
> 最大的数字是：56

### 回调函数

> 函数指针作为某个函数的参数

```c
#include <stdlib.h>  
#include <stdio.h>
 
// 回调函数
void populate_array(int *array, size_t arraySize, int (*getNextValue)(void))
{
    for (size_t i=0; i<arraySize; i++)
        array[i] = getNextValue();
}
 
// 获取随机值
int getNextRandomValue(void)
{
    return rand();
}
 
int main(void)
{
    int myarray[10];
    populate_array(myarray, 10, getNextRandomValue);
    for(int i = 0; i < 10; i++) {
        printf("%d ", myarray[i]);
    }
    printf("\n");
    return 0;
}
```

> 16807 282475249 1622650073 984943658 1144108930 470211272 101027544 1457850878 1458777923 2007237709

### 多个指针

> **p 这个地址对应的存储单元存储的数也是一个地址，而不是数值，而这个被存储的地址对应的存储单元存储的数据才是真正的相应类型的数值

```c
#include <stdio.h>

int main()
{
    int i = 10;		//定义一个整型变量
    int *p = &i;	//定义一个指针指向这个变量
    int **p1 = &p;	//定义一个二级指针指向p指针
    
    # 取出 i 的值 方式有：
    printf("i=[%d]\n", *p);
    printf("i=[%d]\n", **p1);
    
    printf("i的存储地址：%p\n", &i);
    printf("*p的值：%d\n", *p);
    printf("*p的地址：%p\n",&p);
    printf("**p1的值：%d\n", **p1);
    printf("**p1的地址：%p\n",&p1);
    printf("***p2的值：%d\n",***p2);
    printf("***p2的地址：%p\n", &p2);
    
    return 0;
}
```

> i=[10]
>
> i=[10]
>
> i的存储地址：0x7ffeef9a19c8
>
> *p的值：10
>
> *p的地址：0x7ffeef9a19c0
>
> **p1的值：10
>
> **p1的地址：0x7ffeef9a19b8
>
> ***p2的值：10
>
> ***p2的地址：0x7ffeef9a19b0

### 输入输出重定向

> 命令 < 文件		# 将文件作为命令的标准输入
>
> 命令 > 文件		# 将标准输出重定向到一个文件中（清空原有文件的数据）